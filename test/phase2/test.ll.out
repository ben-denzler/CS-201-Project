
Function: test
Block 0:
0:   %a = alloca i32, align 4
1:   %b = alloca i32, align 4
2:   %c = alloca i32, align 4
3:   %d = alloca i32, align 4
4:   %e = alloca i32, align 4
5:   %f = alloca i32, align 4
6:   store i32 0, i32* %a, align 4 (store w/ destination:   %a = alloca i32, align 4)
7:   store i32 1, i32* %c, align 4 (store w/ destination:   %c = alloca i32, align 4)
8:   br label %do.body

Block 1:
9:   %0 = load i32, i32* %a, align 4
10:   %add = add nsw i32 %0, 1
11:   store i32 %add, i32* %c, align 4 (store w/ destination:   %c = alloca i32, align 4)
12:   %1 = load i32, i32* %c, align 4
13:   %2 = load i32, i32* %b, align 4
14:   %mul = mul nsw i32 %1, %2
15:   store i32 %mul, i32* %c, align 4 (store w/ destination:   %c = alloca i32, align 4)
16:   %3 = load i32, i32* %b, align 4
17:   %cmp = icmp sgt i32 %3, 9
18:   br i1 %cmp, label %if.then, label %if.else

Block 2:
19:   %4 = load i32, i32* %d, align 4
20:   %5 = load i32, i32* %c, align 4
21:   %mul1 = mul nsw i32 %4, %5
22:   store i32 %mul1, i32* %f, align 4 (store w/ destination:   %f = alloca i32, align 4)
23:   %6 = load i32, i32* %f, align 4
24:   %sub = sub nsw i32 %6, 3
25:   store i32 %sub, i32* %c, align 4 (store w/ destination:   %c = alloca i32, align 4)
26:   br label %if.end

Block 3:
27:   %7 = load i32, i32* %e, align 4
28:   %add2 = add nsw i32 %7, 1
29:   store i32 %add2, i32* %a, align 4 (store w/ destination:   %a = alloca i32, align 4)
30:   %8 = load i32, i32* %d, align 4
31:   %div = sdiv i32 %8, 2
32:   store i32 %div, i32* %e, align 4 (store w/ destination:   %e = alloca i32, align 4)
33:   br label %if.end

Block 4:
34:   %9 = load i32, i32* %b, align 4
35:   store i32 %9, i32* %a, align 4 (store w/ destination:   %a = alloca i32, align 4)
36:   br label %do.cond

Block 5:
37:   %10 = load i32, i32* %a, align 4
38:   %cmp3 = icmp slt i32 %10, 9
39:   br i1 %cmp3, label %do.body, label %do.end, !llvm.loop !2

Block 6:
40:   %11 = load i32, i32* %a, align 4
41:   %add4 = add nsw i32 %11, 1
42:   store i32 %add4, i32* %a, align 4 (store w/ destination:   %a = alloca i32, align 4)
43:   ret void


Block 0:
  IN: 
  OUT: 6 7 
  GEN: 6 7 
  KILL: 11 15 25 29 35 42 

Block 1:
  IN: 6 7 
  OUT: 6 11 15 
  GEN: 11 15 
  KILL: 7 11 15 25 

Block 2:
  IN: 6 11 15 
  OUT: 6 22 25 
  GEN: 22 25 
  KILL: 7 11 15 

Block 3:
  IN: 6 11 15 
  OUT: 11 15 29 32 
  GEN: 29 32 
  KILL: 6 35 42 

Block 4:
  IN: 6 11 15 22 25 29 32 
  OUT: 11 15 22 25 32 35 
  GEN: 35 
  KILL: 6 29 42 

Block 5:
  IN: 11 15 22 25 32 35 
  OUT: 11 15 22 25 32 35 
  GEN: 
  KILL: 

Block 6:
  IN: 11 15 22 25 32 35 
  OUT: 11 15 22 25 32 42 
  GEN: 42 
  KILL: 6 29 35 

Function: main
Block 0:
0:   %retval = alloca i32, align 4
1:   %argc.addr = alloca i32, align 4
2:   %argv.addr = alloca i8**, align 8
3:   store i32 0, i32* %retval, align 4 (store w/ destination:   %retval = alloca i32, align 4)
4:   store i32 %argc, i32* %argc.addr, align 4 (store w/ destination:   %argc.addr = alloca i32, align 4)
5:   store i8** %argv, i8*** %argv.addr, align 8 (store w/ destination:   %argv.addr = alloca i8**, align 8)
6:   call void @test()
7:   ret i32 0


Block 0:
  IN: 
  OUT: 3 4 5 
  GEN: 3 4 5 
  KILL: 
